-------------- DAGs, Tasks, Operators -----------------------
DAGs (Directed Acyclic Graphs)
âœ… Definition: A DAG is a workflow definition in Airflow that consists of tasks arranged in a dependency order (Directed Acyclic Graph).
âœ… Key Features:
- Defines task execution order but does not execute tasks itself.
- Acyclic means tasks must not create loops (no infinite cycles).
- Scheduled execution based on time or triggers.
ðŸ”¹ Example: A DAG could define a process where:
- Data is extracted.
- Data is transformed.
- Data is loaded into a data warehouse.

Tasks
âœ… Definition: A task represents a unit of work in a DAG.
âœ… Types of Tasks:
- A Python task can execute a Python script.
- A Bash task can run shell commands.
- A Spark task can trigger a Spark job.
ðŸ”¹ Example: If a DAG defines an ETL pipeline, tasks could be:
- Task 1: Extract data from SQL
- Task 2: Transform data using PySpark
- Task 3: Load data into a data warehouse

Operators
âœ… Definition: Operators define what each task does (the actual logic).
âœ… Types of Operators:
    PythonOperator â†’ Runs Python functions.
    BashOperator â†’ Executes shell commands.
    PostgresOperator â†’ Runs SQL queries.
    DummyOperator â†’ Used for placeholders in DAGs.

How They Work Together
DAG â†’ Defines the workflow and task dependencies.
Tasks â†’ Represent individual units of work in the DAG.
Operators â†’ Define what each task does (Python, Bash, SQL, etc.).

------------------------------



