
use practice;
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    created_at DATETIME
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    stock_quantity INT
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATETIME,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE order_items (
    item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    item_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- data sample

show tables;

-- Customers
INSERT INTO customers (customer_id, name, email, created_at) VALUES
(1, 'Alice Smith', 'alice@example.com', '2023-01-15 10:00:00'),
(2, 'Bob Johnson', 'bob@example.com', '2023-02-01 14:30:00'),
(3, 'Carol White', 'carol@example.com', '2023-03-12 09:20:00'),
(4, 'David Brown', 'david@example.com', '2023-04-05 17:45:00'),
(5, 'Eva Green', 'eva@example.com', '2023-05-10 11:15:00');

-- Products
INSERT INTO products (product_id, name, price, stock_quantity) VALUES
(101, 'iPhone 14', 799.99, 10),
(102, 'Samsung Galaxy S', 699.99, 5),
(103, 'Dell Laptop', 1099.99, 2),
(104, 'AirPods Pro', 199.99, 15),
(105, 'Apple Watch', 399.99, 8);

-- Orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1001, 1, '2023-06-01 12:00:00', 1399.98),
(1002, 2, '2023-06-02 13:45:00', 199.99),
(1003, 3, '2023-06-03 15:10:00', 1099.99),
(1004, 1, '2023-06-05 10:30:00', 399.99),
(1005, 4, '2023-06-06 16:20:00', 799.99);

-- Order Items
INSERT INTO order_items (item_id, order_id, product_id, quantity, item_price) VALUES
(1, 1001, 101, 1, 799.99),
(2, 1001, 105, 1, 399.99),
(3, 1002, 104, 1, 199.99),
(4, 1003, 103, 1, 1099.99),
(5, 1004, 105, 1, 399.99),
(6, 1005, 101, 1, 799.99);


-- Q. Find the total number of orders and total revenue generated by each customer. Show their name, email, total_orders, and total_revenue. Sort by revenue descending.

select * from orders

SELECT * from customers

select c.customer_id, c.name, c.email, count(c.customer_id) total_order, sum(o.total_amount) total_revenue 
from customers c INNER join orders o on c.customer_id = o.customer_id 
GROUP BY c.customer_id, c.name, c.email order by total_revenue desc

-- Q Identify customers who havenâ€™t placed any orders.

SELECT c.* 
from customers c left join orders o on c.customer_id=o.customer_id
where o.customer_id is NULL


-- Q Write a query to get the best-selling product based on total quantity sold. Show product name and total quantity.

select *  from products

select * from order_items

select p.name, count(o.quantity) total_count
from products p inner JOIN order_items o on p.product_id=o.product_id 
GROUP BY p.name order by total_count desc

-- Q Show product names that have never been ordered.

select p.* 
from products p LEFT JOIN order_items o on p.product_id= o.product_id
where o.product_id is NULL

-- Q For each order, display: order_id, customer name, order date a comma-separated list of product names in that order

SELECT * from customers

SELECT 
    o.order_id,
    c.name AS customer_name,
    o.order_date,
    GROUP_CONCAT(p.name ORDER BY p.name SEPARATOR ', ') AS product_list
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
INNER JOIN order_items i ON o.order_id = i.order_id
INNER JOIN products p ON i.product_id = p.product_id
GROUP BY o.order_id, c.name, o.order_date;


-- Q Write a query to find the top 2 customers who have spent the most in total. For each customer, show: customer_id, name, email, total_spent


select 
    c.customer_id, c.name, c.email , sum(o.total_amount) total_spent
from customers c
INNER join orders o on c.customer_id=o.customer_id
GROUP BY c.customer_id, c.name, c.email 
order by total_amount DESC 
limit 2


    